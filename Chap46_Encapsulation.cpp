#include <iostream>

/** 문자열 관련 라이브러리*/
#include <string>

/** C++ 표준 라이브러리 사용합니다. */
using namespace std;

int main()
{
    std::cout << "" << std::endl; // (X)
    cout << "" << endl;

    /**
    캡슐화(Encapsulation)

    객체 지향 프로그래밍 (OOP : Object Oriented Programming)
        : 캡슐화, 접근 지정자, 접근 함수

    왜 멤버 변수를 비공개(private)로 할까요?
    객체 지향 언어(C#, Java, C++)에서 멤버 변수는 private 접근 지정자 안에 두어서 외부 객체가
    접근 불가능하게 합니다. 멤버 변수의 보호 때문입니다.

    C++ 에서는 접근 지정자를 두어서 캡슐화를 구현합니다.
    일반적으로 클래스의 멤버 변수는 private으로 설정하고, 멤버 함수는 public으로 설정합니다.
    캡슐화는 외부에 데이터를 은닉하는데 많이 사용이 되는데,
    멤버의 접근 지정어로 3가지가 있습니다.
    publuc(공개적인)    : 외부 클래스에서 무조건 접근이 가능합니다.
    protected(보호된)   : 부모 클래스를 상속받은 자식클래스에서는 public입니다. 외부 클래스에서는 private입니다.
    private(개인적인)   : 외부 클래스에서 접근이 불가능합니다. 외부 클래스에서 멤버 함수로 접근이 가능하도록 해줍니다.
    */

    /**
    해킹 중에는 패킷 해킹입니다.
    */

    /**
    1. 캡슐화
    외부로부터 중요한 데이터(멤버 변수)와 기능(멤버 함수)을 보호하고 은닉하는 것입니다.
    C++에서 클래스의 구성요소는 멤버 변수와 멤버 함수입니다.

    C#에서 클래스의 구성요소는 멤버 변수와 멤버 함수, 속성(Property)입니다.

    우리는 연관있고 공통적인 데이터(멤버 변수)와 기능(멤버 함수)들을 묶어서 객체 지향(추상화)하였습니다.

    데이터와 기능들 중에서 접근할 수 있는 영역을 제한하고(접근 지정자의 역할) 외부로부터
    은닉하는 것을 캡슐화라고 합니다.

    보통 캡슐화를 설명할 때 콘택600을 예로 듭니다.
    콘택600의 알약들은 내가 모르는 private에 있는 멤버 변수들입니다.
    콘택600의 캡슐은 멤버 함수들입니다. 콘택600을 먹으면 감기가 낫습니다.
    */
}