/** 2022.07.18 복습완료 */



#include <iostream>

/** 문자열 관련 라이브러리*/
#include <string>

/** C++ 표준 라이브러리(C++ Standard Library) 사용합니다. */
using namespace std;

/** 
반환값이 없는 Add라는 이름의 함수를 정의해 줍니다. 
반환값이 없는 함수입니다. 
반환값이 없는 함수에는 void(비어있는, 허공의)를 함수 이름 앞에 붙여 줍니다. 
*/
void Add(int value1, int value2)
{
    int value = value1 + value2;
    cout << "Add " << value1 << " + " << value2 << " = " << value << endl;
}

/** 
반환값이 있는 Subtraction이라는 이름의 함수를 정의해 줍니다. 
반환값이 있는 함수입니다. 
int 리턴값을 가지는 Subtraction이라는 이름의 함수를 정의해 줍니다. 
*/
int Subtraction(int value1, int value2)
{
    int value = value1 - value2;
    /** value값을 반환하고 함수를 빠져나갑니다. */
    return value;
}

/**
C++ 스타일입니다.
함수의 원형을 선언하고 함수의 내용을 정의해 줄 수도 있습니다.
Multiply라는 이름의 함수의 원형을 선언해 주고 구현해 주도록 합니다.
*/
/**
함수의 원형을 선언합니다. 

함수의 몸체가 없고 정보만 알려줍니다. 
반환타입이 무엇인지, 함수 이름이 무엇인지, 매개 변수가 몇개이면 무엇인지 알려줍니다. 
반환타입 + 함수이름 + 매개 변수만 알려준 뒤 세미콜론(;)으로 마무리 짖습니다. 
선언부와 정의부를 나누는 것입니다. 

마우스로 함수 이름을 더블클릭해서 함수 이름을 선택합니다. 
Alt + Enter로 함수를 정의(구현)해 줄 수 있습니다. 
*/
void Multiply(int value1, int value2);


int main()
{
    /**
    C++ 언어의 함수는 크게 반환값이 있는 함수와 반환값이 없는 함수로 나눌 수 있습니다. 

    1. 반환값이 있는 함수는 함수가 호출이 되어 뭔가 작업을 거친 후
        호출한 위치로 그 기능을 수행한 결과 값을 다시 보냅니다. 
    2. 반환값이 없는 함수는 단순히 어떤 기능만 수행한다는 것을 의미합니다. 

    그럼 함수는 어떤 상황에서 만들면 되는 것일까요?
    코드 상에서 2번 이상 같은 일을 하는 문장이 있다면 함수로 만들어 줍니다. 
    그리고 함수의 내용을 계속 개선해 주도록 합니다. 
    */

    /**
    예를 들어서 두 개의 입력값을 받아서 더한 값을 돌려 주는 기능을 하는 함수를 생각해 봅니다. 
    이 때 입력되는 값을 매개변수(Parameter) 또는 인수(Argument)라고 합니다. 
    계산 결과값을 호출한 곳으로 되돌려 주는 경우 이것을 반환값(리턴값)이라고 합니다. 

    1. 반환 타입(return type) : 함수가 정의된 기능을 마친 뒤에 반환할 데이터 타입을 정의합니다.
    2. 함수명 : 새로 만들 함수의 이름을 정의합니다. 
    3. 매개변수(Parameter) : 함수 호출시 함수로 전달되는 값을 저장하는 변수로
            함수 내부에서만 사용 가능한 지역변수 입니다. 
    4. 함수 몸체 : 함수의 기능을 정의하는 부분입니다. 
    */

    /** 반환값이 없는 Add라는 이름의 함수를 정의해 줍니다. */

    /** 문장을 추가해 줍니다. */
    int intValue1 = 1024;
    int intValue2 = 2048;

    Add(intValue1, intValue2);
    cout << "" << endl;

    /** 
    안좋은 습관입니다. 
    코드에 직접 수치값을 넣는 것을 하드코딩이라고 합니다. 
    하드코딩은 지뢰밭입니다. 
    수치값이 변경되면 코드상에서 직접 변경해 주어야 합니다. 
    야근을 하게 됩니다. 
    지금은 수치값을 엑셀테이블에 저장해서 처리합니다. 
    수치값이 변경될 경우에는 코드상에서 변경하는 것이 아니라 엑셀테이블에서 변경합니다. 
    */
    Add(1024, 2048);  // 안좋은 습관
    cout << "" << endl;

    /** 반환값이 있는 Subtraction이라는 이름의 함수를 정의해 줍니다. */

    /** 문장을 추가해 줍니다. */
    int intValue3 = 1024;
    int intValue4 = 2048;

    int intValue5 = Subtraction(intValue3, intValue4);
    cout << "Subtraction  " << intValue3 << " - " << intValue4 << " = " << intValue5 << endl;
    cout << "" << endl;

    /**
    함수의 매개변수에 직접 값을 주어도 되지만 변수에 값을 저장해서 함수의 매개변수로 전달해 주는 것이
    좋은 습관입니다. 
    */
    int intValue6 = Subtraction(4096, 2048); // 안좋은 습관
    cout << "Subtraction " << intValue6 << endl;

    /** 지금까지는 C언어 스타일의 함수 정의 방법입니다. */

    /**
    C++ 스타일입니다. 
    함수의 원형을 선언하고 함수의 내용을 정의해 줄 수도 있습니다. 
    Multiply라는 이름의 함수의 원형을 선언해 주고 구현해 주도록 합니다. 
    */

    /** 문장을 추가해 줍니다. */
    int intValue7 = 1024;
    int intValue8 = 512;
    Multiply(intValue7, intValue8);


}
/**
함수를 정의(구현)해 줍니다. 

선언부에서 작성한 함수의 몸체를 구현한 부분입니다. 
정의부가 있어야만 정상적으로 프로그램을 실행할 수 있습니다. 
선언부에서 작성한 함수의 정의부가 없을 경우 정상적으로 코드를 수행할 수 없습니다. 
*/
void Multiply(int value1, int value2)
{
    int value = value1 * value2;
    cout << "Multiply " << value1 << " * " << value2 << " = " << value << endl;
}
